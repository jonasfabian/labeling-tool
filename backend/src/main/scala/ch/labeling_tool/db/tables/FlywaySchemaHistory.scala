/*
 * This file is generated by jOOQ.
 */
package ch.labeling_tool.db.tables


import ch.labeling_tool.db.Indexes
import ch.labeling_tool.db.Keys
import ch.labeling_tool.db.LabelingTool
import ch.labeling_tool.db.tables.records.FlywaySchemaHistoryRecord

import java.lang.Byte
import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.sql.Timestamp
import java.util.Arrays
import java.util.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.TableImpl

import scala.Array


object FlywaySchemaHistory {

  val FLYWAY_SCHEMA_HISTORY = new FlywaySchemaHistory
}

class FlywaySchemaHistory(
  alias : Name,
  child : Table[_ <: Record],
  path : ForeignKey[_ <: Record, FlywaySchemaHistoryRecord],
  aliased : Table[FlywaySchemaHistoryRecord],
  parameters : Array[ Field[_] ]
)
extends TableImpl[FlywaySchemaHistoryRecord](
  alias,
  LabelingTool.LABELING_TOOL,
  child,
  path,
  aliased,
  parameters,
  DSL.comment("")
)
{

  override def getRecordType : Class[FlywaySchemaHistoryRecord] = {
    classOf[FlywaySchemaHistoryRecord]
  }

  val INSTALLED_RANK : TableField[FlywaySchemaHistoryRecord, Integer] = createField("installed_rank", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  val VERSION : TableField[FlywaySchemaHistoryRecord, String] = createField("version", org.jooq.impl.SQLDataType.VARCHAR(50), "")

  val DESCRIPTION : TableField[FlywaySchemaHistoryRecord, String] = createField("description", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), "")

  val TYPE : TableField[FlywaySchemaHistoryRecord, String] = createField("type", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), "")

  val SCRIPT : TableField[FlywaySchemaHistoryRecord, String] = createField("script", org.jooq.impl.SQLDataType.VARCHAR(1000).nullable(false), "")

  val CHECKSUM : TableField[FlywaySchemaHistoryRecord, Integer] = createField("checksum", org.jooq.impl.SQLDataType.INTEGER, "")

  val INSTALLED_BY : TableField[FlywaySchemaHistoryRecord, String] = createField("installed_by", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), "")

  val INSTALLED_ON : TableField[FlywaySchemaHistoryRecord, Timestamp] = createField("installed_on", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), "")

  val EXECUTION_TIME : TableField[FlywaySchemaHistoryRecord, Integer] = createField("execution_time", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  val SUCCESS : TableField[FlywaySchemaHistoryRecord, Byte] = createField("success", org.jooq.impl.SQLDataType.TINYINT.nullable(false), "")

  def this() = {
    this(DSL.name("flyway_schema_history"), null, null, null, null)
  }

  def this(alias : String) = {
    this(DSL.name(alias), null, null, ch.labeling_tool.db.tables.FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, null)
  }

  def this(alias : Name) = {
    this(alias, null, null, ch.labeling_tool.db.tables.FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, null)
  }

  private def this(alias : Name, aliased : Table[FlywaySchemaHistoryRecord]) = {
    this(alias, null, null, aliased, null)
  }

  def this(child : Table[_ <: Record], key : ForeignKey[_ <: Record, FlywaySchemaHistoryRecord]) = {
    this(Internal.createPathAlias(child, key), child, key, ch.labeling_tool.db.tables.FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, null)
  }

  override def getSchema : Schema = LabelingTool.LABELING_TOOL

  override def getIndexes : List[ Index ] = {
    return Arrays.asList[ Index ](Indexes.FLYWAY_SCHEMA_HISTORY_FLYWAY_SCHEMA_HISTORY_S_IDX, Indexes.FLYWAY_SCHEMA_HISTORY_PRIMARY)
  }

  override def getPrimaryKey : UniqueKey[FlywaySchemaHistoryRecord] = {
    Keys.KEY_FLYWAY_SCHEMA_HISTORY_PRIMARY
  }

  override def getKeys : List[ UniqueKey[FlywaySchemaHistoryRecord] ] = {
    return Arrays.asList[ UniqueKey[FlywaySchemaHistoryRecord] ](Keys.KEY_FLYWAY_SCHEMA_HISTORY_PRIMARY)
  }

  override def as(alias : String) : FlywaySchemaHistory = {
    new FlywaySchemaHistory(DSL.name(alias), this)
  }

  override def as(alias : Name) : FlywaySchemaHistory = {
    new FlywaySchemaHistory(alias, this)
  }

  override def rename(name : String) : FlywaySchemaHistory = {
    new FlywaySchemaHistory(DSL.name(name), null)
  }

  override def rename(name : Name) : FlywaySchemaHistory = {
    new FlywaySchemaHistory(name, null)
  }
}
