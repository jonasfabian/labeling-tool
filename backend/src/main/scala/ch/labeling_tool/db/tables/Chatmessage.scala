/*
 * This file is generated by jOOQ.
 */
package ch.labeling_tool.db.tables


import ch.labeling_tool.db.Indexes
import ch.labeling_tool.db.Keys
import ch.labeling_tool.db.LabelingTool
import ch.labeling_tool.db.tables.records.ChatmessageRecord

import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.util.Arrays
import java.util.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.TableImpl

import scala.Array


object Chatmessage {

  val CHATMESSAGE = new Chatmessage
}

class Chatmessage(
  alias : Name,
  child : Table[_ <: Record],
  path : ForeignKey[_ <: Record, ChatmessageRecord],
  aliased : Table[ChatmessageRecord],
  parameters : Array[ Field[_] ]
)
extends TableImpl[ChatmessageRecord](
  alias,
  LabelingTool.LABELING_TOOL,
  child,
  path,
  aliased,
  parameters,
  DSL.comment("")
)
{

  override def getRecordType : Class[ChatmessageRecord] = {
    classOf[ChatmessageRecord]
  }

  val ID : TableField[ChatmessageRecord, Integer] = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), "")

  val CHATMEMBERID : TableField[ChatmessageRecord, Integer] = createField("chatMemberId", org.jooq.impl.SQLDataType.INTEGER, "")

  val MESSAGE : TableField[ChatmessageRecord, String] = createField("message", org.jooq.impl.SQLDataType.CLOB, "")

  def this() = {
    this(DSL.name("chatMessage"), null, null, null, null)
  }

  def this(alias : String) = {
    this(DSL.name(alias), null, null, ch.labeling_tool.db.tables.Chatmessage.CHATMESSAGE, null)
  }

  def this(alias : Name) = {
    this(alias, null, null, ch.labeling_tool.db.tables.Chatmessage.CHATMESSAGE, null)
  }

  private def this(alias : Name, aliased : Table[ChatmessageRecord]) = {
    this(alias, null, null, aliased, null)
  }

  def this(child : Table[_ <: Record], key : ForeignKey[_ <: Record, ChatmessageRecord]) = {
    this(Internal.createPathAlias(child, key), child, key, ch.labeling_tool.db.tables.Chatmessage.CHATMESSAGE, null)
  }

  override def getSchema : Schema = LabelingTool.LABELING_TOOL

  override def getIndexes : List[ Index ] = {
    return Arrays.asList[ Index ](Indexes.CHATMESSAGE_PRIMARY)
  }

  override def getIdentity : Identity[ChatmessageRecord, Integer] = {
    Keys.IDENTITY_CHATMESSAGE
  }

  override def getPrimaryKey : UniqueKey[ChatmessageRecord] = {
    Keys.KEY_CHATMESSAGE_PRIMARY
  }

  override def getKeys : List[ UniqueKey[ChatmessageRecord] ] = {
    return Arrays.asList[ UniqueKey[ChatmessageRecord] ](Keys.KEY_CHATMESSAGE_PRIMARY)
  }

  override def as(alias : String) : Chatmessage = {
    new Chatmessage(DSL.name(alias), this)
  }

  override def as(alias : Name) : Chatmessage = {
    new Chatmessage(alias, this)
  }

  override def rename(name : String) : Chatmessage = {
    new Chatmessage(DSL.name(name), null)
  }

  override def rename(name : Name) : Chatmessage = {
    new Chatmessage(name, null)
  }
}
