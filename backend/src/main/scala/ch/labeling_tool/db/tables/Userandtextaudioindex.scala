/*
 * This file is generated by jOOQ.
 */
package ch.labeling_tool.db.tables


import ch.labeling_tool.db.Indexes
import ch.labeling_tool.db.Keys
import ch.labeling_tool.db.LabelingTool
import ch.labeling_tool.db.tables.records.UserandtextaudioindexRecord

import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.util.Arrays
import java.util.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.TableImpl

import scala.Array


object Userandtextaudioindex {

  val USERANDTEXTAUDIOINDEX = new Userandtextaudioindex
}

class Userandtextaudioindex(
  alias : Name,
  child : Table[_ <: Record],
  path : ForeignKey[_ <: Record, UserandtextaudioindexRecord],
  aliased : Table[UserandtextaudioindexRecord],
  parameters : Array[ Field[_] ]
)
extends TableImpl[UserandtextaudioindexRecord](
  alias,
  LabelingTool.LABELING_TOOL,
  child,
  path,
  aliased,
  parameters,
  DSL.comment("")
)
{

  override def getRecordType : Class[UserandtextaudioindexRecord] = {
    classOf[UserandtextaudioindexRecord]
  }

  val ID : TableField[UserandtextaudioindexRecord, Integer] = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), "")

  val USERID : TableField[UserandtextaudioindexRecord, Integer] = createField("userId", org.jooq.impl.SQLDataType.INTEGER, "")

  val TEXTAUDIOINDEXID : TableField[UserandtextaudioindexRecord, Integer] = createField("textAudioIndexId", org.jooq.impl.SQLDataType.INTEGER, "")

  def this() = {
    this(DSL.name("userAndTextAudioIndex"), null, null, null, null)
  }

  def this(alias : String) = {
    this(DSL.name(alias), null, null, ch.labeling_tool.db.tables.Userandtextaudioindex.USERANDTEXTAUDIOINDEX, null)
  }

  def this(alias : Name) = {
    this(alias, null, null, ch.labeling_tool.db.tables.Userandtextaudioindex.USERANDTEXTAUDIOINDEX, null)
  }

  private def this(alias : Name, aliased : Table[UserandtextaudioindexRecord]) = {
    this(alias, null, null, aliased, null)
  }

  def this(child : Table[_ <: Record], key : ForeignKey[_ <: Record, UserandtextaudioindexRecord]) = {
    this(Internal.createPathAlias(child, key), child, key, ch.labeling_tool.db.tables.Userandtextaudioindex.USERANDTEXTAUDIOINDEX, null)
  }

  override def getSchema : Schema = LabelingTool.LABELING_TOOL

  override def getIndexes : List[ Index ] = {
    return Arrays.asList[ Index ](Indexes.USERANDTEXTAUDIOINDEX_PRIMARY, Indexes.USERANDTEXTAUDIOINDEX_UNI)
  }

  override def getIdentity : Identity[UserandtextaudioindexRecord, Integer] = {
    Keys.IDENTITY_USERANDTEXTAUDIOINDEX
  }

  override def getPrimaryKey : UniqueKey[UserandtextaudioindexRecord] = {
    Keys.KEY_USERANDTEXTAUDIOINDEX_PRIMARY
  }

  override def getKeys : List[ UniqueKey[UserandtextaudioindexRecord] ] = {
    return Arrays.asList[ UniqueKey[UserandtextaudioindexRecord] ](Keys.KEY_USERANDTEXTAUDIOINDEX_PRIMARY, Keys.KEY_USERANDTEXTAUDIOINDEX_UNI)
  }

  override def as(alias : String) : Userandtextaudioindex = {
    new Userandtextaudioindex(DSL.name(alias), this)
  }

  override def as(alias : Name) : Userandtextaudioindex = {
    new Userandtextaudioindex(alias, this)
  }

  override def rename(name : String) : Userandtextaudioindex = {
    new Userandtextaudioindex(DSL.name(name), null)
  }

  override def rename(name : Name) : Userandtextaudioindex = {
    new Userandtextaudioindex(name, null)
  }
}
