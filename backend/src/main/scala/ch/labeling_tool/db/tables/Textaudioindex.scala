/*
 * This file is generated by jOOQ.
 */
package ch.labeling_tool.db.tables


import ch.labeling_tool.db.Indexes
import ch.labeling_tool.db.Keys
import ch.labeling_tool.db.LabelingTool
import ch.labeling_tool.db.tables.records.TextaudioindexRecord

import java.lang.Class
import java.lang.Double
import java.lang.Integer
import java.lang.String
import java.util.Arrays
import java.util.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.TableImpl

import scala.Array


object Textaudioindex {

  val TEXTAUDIOINDEX = new Textaudioindex
}

class Textaudioindex(
  alias : Name,
  child : Table[_ <: Record],
  path : ForeignKey[_ <: Record, TextaudioindexRecord],
  aliased : Table[TextaudioindexRecord],
  parameters : Array[ Field[_] ]
)
extends TableImpl[TextaudioindexRecord](
  alias,
  LabelingTool.LABELING_TOOL,
  child,
  path,
  aliased,
  parameters,
  DSL.comment("")
)
{

  override def getRecordType : Class[TextaudioindexRecord] = {
    classOf[TextaudioindexRecord]
  }

  val ID : TableField[TextaudioindexRecord, Integer] = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), "")

  val SAMPLINGRATE : TableField[TextaudioindexRecord, Integer] = createField("samplingRate", org.jooq.impl.SQLDataType.INTEGER, "")

  val TEXTSTARTPOS : TableField[TextaudioindexRecord, Integer] = createField("textStartPos", org.jooq.impl.SQLDataType.INTEGER, "")

  val TEXTENDPOS : TableField[TextaudioindexRecord, Integer] = createField("textEndPos", org.jooq.impl.SQLDataType.INTEGER, "")

  val AUDIOSTARTPOS : TableField[TextaudioindexRecord, Double] = createField("audioStartPos", org.jooq.impl.SQLDataType.DOUBLE, "")

  val AUDIOENDPOS : TableField[TextaudioindexRecord, Double] = createField("audioEndPos", org.jooq.impl.SQLDataType.DOUBLE, "")

  val SPEAKERKEY : TableField[TextaudioindexRecord, Integer] = createField("speakerKey", org.jooq.impl.SQLDataType.INTEGER, "")

  val LABELED : TableField[TextaudioindexRecord, Integer] = createField("labeled", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), "")

  val CORRECT : TableField[TextaudioindexRecord, Integer] = createField("correct", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), "")

  val WRONG : TableField[TextaudioindexRecord, Integer] = createField("wrong", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), "")

  val TRANSCRIPT_FILE_ID : TableField[TextaudioindexRecord, Integer] = createField("transcript_file_id", org.jooq.impl.SQLDataType.INTEGER, "")

  def this() = {
    this(DSL.name("textAudioIndex"), null, null, null, null)
  }

  def this(alias : String) = {
    this(DSL.name(alias), null, null, ch.labeling_tool.db.tables.Textaudioindex.TEXTAUDIOINDEX, null)
  }

  def this(alias : Name) = {
    this(alias, null, null, ch.labeling_tool.db.tables.Textaudioindex.TEXTAUDIOINDEX, null)
  }

  private def this(alias : Name, aliased : Table[TextaudioindexRecord]) = {
    this(alias, null, null, aliased, null)
  }

  def this(child : Table[_ <: Record], key : ForeignKey[_ <: Record, TextaudioindexRecord]) = {
    this(Internal.createPathAlias(child, key), child, key, ch.labeling_tool.db.tables.Textaudioindex.TEXTAUDIOINDEX, null)
  }

  override def getSchema : Schema = LabelingTool.LABELING_TOOL

  override def getIndexes : List[ Index ] = {
    return Arrays.asList[ Index ](Indexes.TEXTAUDIOINDEX_PRIMARY)
  }

  override def getIdentity : Identity[TextaudioindexRecord, Integer] = {
    Keys.IDENTITY_TEXTAUDIOINDEX
  }

  override def getPrimaryKey : UniqueKey[TextaudioindexRecord] = {
    Keys.KEY_TEXTAUDIOINDEX_PRIMARY
  }

  override def getKeys : List[ UniqueKey[TextaudioindexRecord] ] = {
    return Arrays.asList[ UniqueKey[TextaudioindexRecord] ](Keys.KEY_TEXTAUDIOINDEX_PRIMARY)
  }

  override def as(alias : String) : Textaudioindex = {
    new Textaudioindex(DSL.name(alias), this)
  }

  override def as(alias : Name) : Textaudioindex = {
    new Textaudioindex(alias, this)
  }

  override def rename(name : String) : Textaudioindex = {
    new Textaudioindex(DSL.name(name), null)
  }

  override def rename(name : Name) : Textaudioindex = {
    new Textaudioindex(name, null)
  }
}
