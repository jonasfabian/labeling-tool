/*
 * This file is generated by jOOQ.
 */
package ch.labeling_tool.db.tables


import ch.labeling_tool.db.Indexes
import ch.labeling_tool.db.Keys
import ch.labeling_tool.db.LabelingTool
import ch.labeling_tool.db.tables.records.ChatRecord

import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.util.Arrays
import java.util.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.TableImpl

import scala.Array


object Chat {

  val CHAT = new Chat
}

class Chat(
  alias : Name,
  child : Table[_ <: Record],
  path : ForeignKey[_ <: Record, ChatRecord],
  aliased : Table[ChatRecord],
  parameters : Array[ Field[_] ]
)
extends TableImpl[ChatRecord](
  alias,
  LabelingTool.LABELING_TOOL,
  child,
  path,
  aliased,
  parameters,
  DSL.comment("")
)
{

  override def getRecordType : Class[ChatRecord] = {
    classOf[ChatRecord]
  }

  val ID : TableField[ChatRecord, Integer] = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), "")

  val CHATNAME : TableField[ChatRecord, String] = createField("chatName", org.jooq.impl.SQLDataType.VARCHAR(100), "")

  def this() = {
    this(DSL.name("chat"), null, null, null, null)
  }

  def this(alias : String) = {
    this(DSL.name(alias), null, null, ch.labeling_tool.db.tables.Chat.CHAT, null)
  }

  def this(alias : Name) = {
    this(alias, null, null, ch.labeling_tool.db.tables.Chat.CHAT, null)
  }

  private def this(alias : Name, aliased : Table[ChatRecord]) = {
    this(alias, null, null, aliased, null)
  }

  def this(child : Table[_ <: Record], key : ForeignKey[_ <: Record, ChatRecord]) = {
    this(Internal.createPathAlias(child, key), child, key, ch.labeling_tool.db.tables.Chat.CHAT, null)
  }

  override def getSchema : Schema = LabelingTool.LABELING_TOOL

  override def getIndexes : List[ Index ] = {
    return Arrays.asList[ Index ](Indexes.CHAT_CHATNAME, Indexes.CHAT_PRIMARY)
  }

  override def getIdentity : Identity[ChatRecord, Integer] = {
    Keys.IDENTITY_CHAT
  }

  override def getPrimaryKey : UniqueKey[ChatRecord] = {
    Keys.KEY_CHAT_PRIMARY
  }

  override def getKeys : List[ UniqueKey[ChatRecord] ] = {
    return Arrays.asList[ UniqueKey[ChatRecord] ](Keys.KEY_CHAT_PRIMARY, Keys.KEY_CHAT_CHATNAME)
  }

  override def as(alias : String) : Chat = {
    new Chat(DSL.name(alias), this)
  }

  override def as(alias : Name) : Chat = {
    new Chat(alias, this)
  }

  override def rename(name : String) : Chat = {
    new Chat(DSL.name(name), null)
  }

  override def rename(name : Name) : Chat = {
    new Chat(name, null)
  }
}
