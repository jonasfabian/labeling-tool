/*
 * This file is generated by jOOQ.
 */
package ch.labeling_tool.db.tables.records


import ch.labeling_tool.db.tables.Audio

import java.lang.Integer
import java.lang.String

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl


class AudioRecord extends UpdatableRecordImpl[AudioRecord](Audio.AUDIO) with Record3[Integer, String, Integer] {

  def setId(value : Integer) : Unit = {
    set(0, value)
  }

  def getId : Integer = {
    val r = get(0)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  def setPath(value : String) : Unit = {
    set(1, value)
  }

  def getPath : String = {
    val r = get(1)
    if (r == null) null else r.asInstanceOf[String]
  }

  def setFileid(value : Integer) : Unit = {
    set(2, value)
  }

  def getFileid : Integer = {
    val r = get(2)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------
  override def key : Record1[Integer] = {
    return super.key.asInstanceOf[ Record1[Integer] ]
  }

  // -------------------------------------------------------------------------
  // Record3 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow : Row3[Integer, String, Integer] = {
    super.fieldsRow.asInstanceOf[ Row3[Integer, String, Integer] ]
  }

  override def valuesRow : Row3[Integer, String, Integer] = {
    super.valuesRow.asInstanceOf[ Row3[Integer, String, Integer] ]
  }
  override def field1 : Field[Integer] = Audio.AUDIO.ID
  override def field2 : Field[String] = Audio.AUDIO.PATH
  override def field3 : Field[Integer] = Audio.AUDIO.FILEID
  override def component1 : Integer = getId
  override def component2 : String = getPath
  override def component3 : Integer = getFileid
  override def value1 : Integer = getId
  override def value2 : String = getPath
  override def value3 : Integer = getFileid

  override def value1(value : Integer) : AudioRecord = {
    setId(value)
    this
  }

  override def value2(value : String) : AudioRecord = {
    setPath(value)
    this
  }

  override def value3(value : Integer) : AudioRecord = {
    setFileid(value)
    this
  }

  override def values(value1 : Integer, value2 : String, value3 : Integer) : AudioRecord = {
    this.value1(value1)
    this.value2(value2)
    this.value3(value3)
    this
  }

  def this(id : Integer, path : String, fileid : Integer) = {
    this()

    set(0, id)
    set(1, path)
    set(2, fileid)
  }
}
