/*
 * This file is generated by jOOQ.
 */
package jooq.db.tables.records


import java.lang.Integer
import java.lang.Long
import java.lang.String

import jooq.db.tables.Recordings

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl

import scala.Array
import scala.Byte


class RecordingsRecord extends UpdatableRecordImpl[RecordingsRecord](Recordings.RECORDINGS) with Record4[Long, String, Integer, Array[Byte]] {

  def setId(value : Long) : Unit = {
    set(0, value)
  }

  def getId : Long = {
    val r = get(0)
    if (r == null) null else r.asInstanceOf[Long]
  }

  def setText(value : String) : Unit = {
    set(1, value)
  }

  def getText : String = {
    val r = get(1)
    if (r == null) null else r.asInstanceOf[String]
  }

  def setUserid(value : Integer) : Unit = {
    set(2, value)
  }

  def getUserid : Integer = {
    val r = get(2)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  def setAudio(value : Array[Byte]) : Unit = {
    set(3, value)
  }

  def getAudio : Array[Byte] = {
    val r = get(3)
    if (r == null) null else r.asInstanceOf[Array[Byte]]
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------
  override def key : Record1[Long] = {
    return super.key.asInstanceOf[ Record1[Long] ]
  }

  // -------------------------------------------------------------------------
  // Record4 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow : Row4[Long, String, Integer, Array[Byte]] = {
    super.fieldsRow.asInstanceOf[ Row4[Long, String, Integer, Array[Byte]] ]
  }

  override def valuesRow : Row4[Long, String, Integer, Array[Byte]] = {
    super.valuesRow.asInstanceOf[ Row4[Long, String, Integer, Array[Byte]] ]
  }
  override def field1 : Field[Long] = Recordings.RECORDINGS.ID
  override def field2 : Field[String] = Recordings.RECORDINGS.TEXT
  override def field3 : Field[Integer] = Recordings.RECORDINGS.USERID
  override def field4 : Field[Array[Byte]] = Recordings.RECORDINGS.AUDIO
  override def component1 : Long = getId
  override def component2 : String = getText
  override def component3 : Integer = getUserid
  override def component4 : Array[Byte] = getAudio
  override def value1 : Long = getId
  override def value2 : String = getText
  override def value3 : Integer = getUserid
  override def value4 : Array[Byte] = getAudio

  override def value1(value : Long) : RecordingsRecord = {
    setId(value)
    this
  }

  override def value2(value : String) : RecordingsRecord = {
    setText(value)
    this
  }

  override def value3(value : Integer) : RecordingsRecord = {
    setUserid(value)
    this
  }

  override def value4(value : Array[Byte]) : RecordingsRecord = {
    setAudio(value)
    this
  }

  override def values(value1 : Long, value2 : String, value3 : Integer, value4 : Array[Byte]) : RecordingsRecord = {
    this.value1(value1)
    this.value2(value2)
    this.value3(value3)
    this.value4(value4)
    this
  }

  def this(id : Long, text : String, userid : Integer, audio : Array[Byte]) = {
    this()

    set(0, id)
    set(1, text)
    set(2, userid)
    set(3, audio)
  }
}
