/*
 * This file is generated by jOOQ.
 */
package jooq.db.tables.records


import java.lang.Integer
import java.lang.Long

import jooq.db.tables.Avatar

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl

import scala.Array
import scala.Byte


class AvatarRecord extends UpdatableRecordImpl[AvatarRecord](Avatar.AVATAR) with Record3[Long, Integer, Array[Byte]] {

  def setId(value : Long) : Unit = {
    set(0, value)
  }

  def getId : Long = {
    val r = get(0)
    if (r == null) null else r.asInstanceOf[Long]
  }

  def setUserid(value : Integer) : Unit = {
    set(1, value)
  }

  def getUserid : Integer = {
    val r = get(1)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  def setAvatar(value : Array[Byte]) : Unit = {
    set(2, value)
  }

  def getAvatar : Array[Byte] = {
    val r = get(2)
    if (r == null) null else r.asInstanceOf[Array[Byte]]
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------
  override def key : Record1[Long] = {
    return super.key.asInstanceOf[ Record1[Long] ]
  }

  // -------------------------------------------------------------------------
  // Record3 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow : Row3[Long, Integer, Array[Byte]] = {
    super.fieldsRow.asInstanceOf[ Row3[Long, Integer, Array[Byte]] ]
  }

  override def valuesRow : Row3[Long, Integer, Array[Byte]] = {
    super.valuesRow.asInstanceOf[ Row3[Long, Integer, Array[Byte]] ]
  }
  override def field1 : Field[Long] = Avatar.AVATAR.ID
  override def field2 : Field[Integer] = Avatar.AVATAR.USERID
  override def field3 : Field[Array[Byte]] = Avatar.AVATAR.AVATAR_
  override def component1 : Long = getId
  override def component2 : Integer = getUserid
  override def component3 : Array[Byte] = getAvatar
  override def value1 : Long = getId
  override def value2 : Integer = getUserid
  override def value3 : Array[Byte] = getAvatar

  override def value1(value : Long) : AvatarRecord = {
    setId(value)
    this
  }

  override def value2(value : Integer) : AvatarRecord = {
    setUserid(value)
    this
  }

  override def value3(value : Array[Byte]) : AvatarRecord = {
    setAvatar(value)
    this
  }

  override def values(value1 : Long, value2 : Integer, value3 : Array[Byte]) : AvatarRecord = {
    this.value1(value1)
    this.value2(value2)
    this.value3(value3)
    this
  }

  def this(id : Long, userid : Integer, avatar : Array[Byte]) = {
    this()

    set(0, id)
    set(1, userid)
    set(2, avatar)
  }
}
