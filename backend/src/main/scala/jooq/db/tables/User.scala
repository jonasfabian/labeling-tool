/*
 * This file is generated by jOOQ.
 */
package jooq.db.tables


import java.lang.Class
import java.lang.Long
import java.lang.String
import java.util.Arrays
import java.util.List

import jooq.db.Indexes
import jooq.db.Keys
import jooq.db.LabelingTool
import jooq.db.tables.records.UserRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.TableImpl

import scala.Array


object User {

  val USER = new User
}

class User(
  alias : Name,
  child : Table[_ <: Record],
  path : ForeignKey[_ <: Record, UserRecord],
  aliased : Table[UserRecord],
  parameters : Array[ Field[_] ]
)
extends TableImpl[UserRecord](
  alias,
  LabelingTool.LABELING_TOOL,
  child,
  path,
  aliased,
  parameters,
  DSL.comment("")
)
{

  override def getRecordType : Class[UserRecord] = {
    classOf[UserRecord]
  }

  val ID : TableField[UserRecord, Long] = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), "")

  val FIRSTNAME : TableField[UserRecord, String] = createField("firstName", org.jooq.impl.SQLDataType.VARCHAR(100).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), "")

  val LASTNAME : TableField[UserRecord, String] = createField("lastName", org.jooq.impl.SQLDataType.VARCHAR(100).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), "")

  val EMAIL : TableField[UserRecord, String] = createField("email", org.jooq.impl.SQLDataType.VARCHAR(100).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), "")

  val USERNAME : TableField[UserRecord, String] = createField("username", org.jooq.impl.SQLDataType.VARCHAR(100).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), "")

  val AVATARVERSION : TableField[UserRecord, Long] = createField("avatarVersion", org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIGINT)), "")

  val PASSWORD : TableField[UserRecord, String] = createField("password", org.jooq.impl.SQLDataType.VARCHAR(100).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), "")

  val CANTON : TableField[UserRecord, String] = createField("canton", org.jooq.impl.SQLDataType.VARCHAR(45).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), "")

  def this() = {
    this(DSL.name("user"), null, null, null, null)
  }

  def this(alias : String) = {
    this(DSL.name(alias), null, null, jooq.db.tables.User.USER, null)
  }

  def this(alias : Name) = {
    this(alias, null, null, jooq.db.tables.User.USER, null)
  }

  private def this(alias : Name, aliased : Table[UserRecord]) = {
    this(alias, null, null, aliased, null)
  }

  def this(child : Table[_ <: Record], key : ForeignKey[_ <: Record, UserRecord]) = {
    this(Internal.createPathAlias(child, key), child, key, jooq.db.tables.User.USER, null)
  }

  override def getSchema : Schema = LabelingTool.LABELING_TOOL

  override def getIndexes : List[ Index ] = {
    return Arrays.asList[ Index ](Indexes.USER_EMAIL, Indexes.USER_PRIMARY)
  }

  override def getIdentity : Identity[UserRecord, Long] = {
    Keys.IDENTITY_USER
  }

  override def getPrimaryKey : UniqueKey[UserRecord] = {
    Keys.KEY_USER_PRIMARY
  }

  override def getKeys : List[ UniqueKey[UserRecord] ] = {
    return Arrays.asList[ UniqueKey[UserRecord] ](Keys.KEY_USER_PRIMARY, Keys.KEY_USER_EMAIL)
  }

  override def as(alias : String) : User = {
    new User(DSL.name(alias), this)
  }

  override def as(alias : Name) : User = {
    new User(alias, this)
  }

  override def rename(name : String) : User = {
    new User(DSL.name(name), null)
  }

  override def rename(name : Name) : User = {
    new User(name, null)
  }
}
