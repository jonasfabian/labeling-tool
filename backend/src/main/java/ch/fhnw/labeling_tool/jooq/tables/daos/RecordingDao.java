/*
 * This file is generated by jOOQ.
 */
package ch.fhnw.labeling_tool.jooq.tables.daos;


import ch.fhnw.labeling_tool.jooq.enums.RecordingLabel;
import ch.fhnw.labeling_tool.jooq.tables.Recording;
import ch.fhnw.labeling_tool.jooq.tables.records.RecordingRecord;

import java.sql.Timestamp;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class RecordingDao extends DAOImpl<RecordingRecord, ch.fhnw.labeling_tool.jooq.tables.pojos.Recording, Long> {

    public RecordingDao() {
        super(Recording.RECORDING, ch.fhnw.labeling_tool.jooq.tables.pojos.Recording.class);
    }

    @Autowired
    public RecordingDao(Configuration configuration) {
        super(Recording.RECORDING, ch.fhnw.labeling_tool.jooq.tables.pojos.Recording.class, configuration);
    }

    @Override
    public Long getId(ch.fhnw.labeling_tool.jooq.tables.pojos.Recording object) {
        return object.getId();
    }

    public List<ch.fhnw.labeling_tool.jooq.tables.pojos.Recording> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Recording.RECORDING.ID, lowerInclusive, upperInclusive);
    }

    public List<ch.fhnw.labeling_tool.jooq.tables.pojos.Recording> fetchById(Long... values) {
        return fetch(Recording.RECORDING.ID, values);
    }

    public ch.fhnw.labeling_tool.jooq.tables.pojos.Recording fetchOneById(Long value) {
        return fetchOne(Recording.RECORDING.ID, value);
    }

    public List<ch.fhnw.labeling_tool.jooq.tables.pojos.Recording> fetchRangeOfExcerptId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Recording.RECORDING.EXCERPT_ID, lowerInclusive, upperInclusive);
    }

    public List<ch.fhnw.labeling_tool.jooq.tables.pojos.Recording> fetchByExcerptId(Long... values) {
        return fetch(Recording.RECORDING.EXCERPT_ID, values);
    }

    public List<ch.fhnw.labeling_tool.jooq.tables.pojos.Recording> fetchRangeOfUserId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Recording.RECORDING.USER_ID, lowerInclusive, upperInclusive);
    }

    public List<ch.fhnw.labeling_tool.jooq.tables.pojos.Recording> fetchByUserId(Long... values) {
        return fetch(Recording.RECORDING.USER_ID, values);
    }

    public List<ch.fhnw.labeling_tool.jooq.tables.pojos.Recording> fetchRangeOfTime(Timestamp lowerInclusive, Timestamp upperInclusive) {
        return fetchRange(Recording.RECORDING.TIME, lowerInclusive, upperInclusive);
    }

    public List<ch.fhnw.labeling_tool.jooq.tables.pojos.Recording> fetchByTime(Timestamp... values) {
        return fetch(Recording.RECORDING.TIME, values);
    }

    public List<ch.fhnw.labeling_tool.jooq.tables.pojos.Recording> fetchRangeOfLabel(RecordingLabel lowerInclusive, RecordingLabel upperInclusive) {
        return fetchRange(Recording.RECORDING.LABEL, lowerInclusive, upperInclusive);
    }

    public List<ch.fhnw.labeling_tool.jooq.tables.pojos.Recording> fetchByLabel(RecordingLabel... values) {
        return fetch(Recording.RECORDING.LABEL, values);
    }

    public List<ch.fhnw.labeling_tool.jooq.tables.pojos.Recording> fetchRangeOfWrong(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Recording.RECORDING.WRONG, lowerInclusive, upperInclusive);
    }

    public List<ch.fhnw.labeling_tool.jooq.tables.pojos.Recording> fetchByWrong(Long... values) {
        return fetch(Recording.RECORDING.WRONG, values);
    }

    public List<ch.fhnw.labeling_tool.jooq.tables.pojos.Recording> fetchRangeOfCorrect(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Recording.RECORDING.CORRECT, lowerInclusive, upperInclusive);
    }

    public List<ch.fhnw.labeling_tool.jooq.tables.pojos.Recording> fetchByCorrect(Long... values) {
        return fetch(Recording.RECORDING.CORRECT, values);
    }

    public List<ch.fhnw.labeling_tool.jooq.tables.pojos.Recording> fetchRangeOfDeleted(Timestamp lowerInclusive, Timestamp upperInclusive) {
        return fetchRange(Recording.RECORDING.DELETED, lowerInclusive, upperInclusive);
    }

    public List<ch.fhnw.labeling_tool.jooq.tables.pojos.Recording> fetchByDeleted(Timestamp... values) {
        return fetch(Recording.RECORDING.DELETED, values);
    }
}
